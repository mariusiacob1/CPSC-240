     1                                  
     2                                  ;Program name: "Sum of an Array".  This program demonstrates the input of multiple float numbers from the standard input device
     3                                  ;using a single instruction and the output of multiple float numbers to the standard output device also using a single 
     4                                  ;instruction.  Copyright (C) 2019 Marius Iacob.
     5                                  ;
     6                                  ;==================================================================================================================================
     7                                  ;This file is part of the software program "Sum of an Array".                                                                 
     8                                  ;Sum of an Array is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
     9                                  ;version 3 as published by the Free Software Foundation.                                                                    
    10                                  ;Sum of an Array is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         
    11                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     
    12                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.
    13                                  ;
    14                                  ;==================================================================================================================================
    15                                  ;Author information
    16                                  ;   Author name: Marius Iacob
    17                                  ;   Author email: mariusiacob@csu.fullerton.edu
    18                                  ;
    19                                  ;==================================================================================================================================
    20                                  ;Program information
    21                                  ;   Program name: Sum of an Array
    22                                  ;   Programming languages: One modules in C++, C, and one module in X86
    23                                  ;   Date program began: 2021-Mar-12
    24                                  ;   Date of last update: 2021-Mar-21
    25                                  ;   Date of reorganization of comments: 2021-Mar-21
    26                                  ;   Files in this program: Control.asm, Fill.asm, Sum.asm, Display.cpp, Main.c, and Script.sh
    27                                  ;   Status: Finished.  The program was tested extensively with no errors in Ubuntu 20.04
    28                                  ;
    29                                  ;==================================================================================================================================
    30                                  ;Purpose
    31                                  ;   Show how to input, output, and calculating floating point (64-bit) numbers.
    32                                  ;   This file (Control.asm) will control/call all the files in this entire program
    33                                  ;   in order.
    34                                  ;
    35                                  ;==================================================================================================================================
    36                                  ;This file
    37                                  ;   File name: Control.asm
    38                                  ;   Language: X86 with Intel syntax.
    39                                  ;   Max page width: 132 columns
    40                                  ;   Assemble: nasm -f elf64 -l Control.lis -o Control.o Control.asm
    41                                  ;
    42                                  ;==================================================================================================================================
    43                                  
    44                                  ;=======================================BEGIN CODE=================================================
    45                                  extern printf
    46                                  extern scanf
    47                                  extern _fill
    48                                  extern _sum
    49                                  extern displayArray
    50                                  extern main
    51                                  
    52                                  arraySize equ 100                       ;Capacity limit for number of elements allowed in array.
    53                                  
    54                                  global _control
    55                                  
    56                                  segment .data
    57                                      ;Welcome/Outputs
    58 00000000 57656C636F6D652074-         welcomeOutput db "Welcome to Sum of an Array calculator. The accuracy and reliability of this program is guaranteed by Marius I.",10,0
    58 00000009 6F2053756D206F6620-
    58 00000012 616E20417272617920-
    58 0000001B 63616C63756C61746F-
    58 00000024 722E20546865206163-
    58 0000002D 63757261637920616E-
    58 00000036 642072656C69616269-
    58 0000003F 6C697479206F662074-
    58 00000048 6869732070726F6772-
    58 00000051 616D20697320677561-
    58 0000005A 72616E746565642062-
    58 00000063 79204D617269757320-
    58 0000006C 492E0A00           
    59 00000070 546865206E756D6265-         numbersOutput db "The numbers you entered are these: ",10,0
    59 00000079 727320796F7520656E-
    59 00000082 746572656420617265-
    59 0000008B 2074686573653A200A-
    59 00000094 00                 
    60 00000095 5468652073756D206F-         sumOutput db "The sum of these values is %5.8lf",10,0
    60 0000009E 662074686573652076-
    60 000000A7 616C75657320697320-
    60 000000B0 25352E386C660A00   
    61 000000B8 54686520636F6E7472-         returnOutput db "The control module will now return the sum to the caller module",10,0
    61 000000C1 6F6C206D6F64756C65-
    61 000000CA 2077696C6C206E6F77-
    61 000000D3 2072657475726E2074-
    61 000000DC 68652073756D20746F-
    61 000000E5 207468652063616C6C-
    61 000000EE 6572206D6F64756C65-
    61 000000F7 0A00               
    62                                  
    63                                      ;Formats
    64 000000F9 257300                      stringFormat db "%s",0
    65                                  
    66                                  segment .bss    ;Reserved for uninitialized data
    67 00000000 <res 00000320>              myArray: resq 100                   ;Uninitialized array with 100 reserved qwords.
    68                                  
    69                                  segment .text   ;Reserved for executing instructions.
    70                                  
    71                                  _control:
    72                                  
    73                                  ;Prolog: Insurance for any caller of this assembly module
    74                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    75 00000000 55                      push rbp
    76 00000001 4889E5                  mov rbp, rsp
    77 00000004 57                      push rdi
    78 00000005 56                      push rsi
    79 00000006 52                      push rdx
    80 00000007 51                      push rcx
    81 00000008 4150                    push r8
    82 0000000A 4151                    push r9
    83 0000000C 4152                    push r10
    84 0000000E 4153                    push r11
    85 00000010 4154                    push r12
    86 00000012 4155                    push r13
    87 00000014 4156                    push r14
    88 00000016 4157                    push r15
    89 00000018 53                      push rbx
    90 00000019 9C                      pushf
    91                                  
    92 0000001A 6AFF                    push qword -1                           ; Extra push to create even number of pushes
    93                                  
    94                                  ;=======================================INITIALIZE PARAMETERS======================================
    95 0000001C 41BE00000000            mov qword r14, 0                        ; Reserve register for number of elements in array.
    96 00000022 41BD00000000            mov qword r13, 0                        ; Reserve register for Sum of integers in array
    97                                  
    98                                  ;=======================================INSTRUCTION PROMPT=========================================
    99                                  ;Display welcomeOutput
   100 00000028 48BF-                   mov qword rdi, stringFormat                     
   100 0000002A [F900000000000000] 
   101 00000032 48BE-                   mov qword rsi, welcomeOutput              
   101 00000034 [0000000000000000] 
   102 0000003C B800000000              mov qword rax, 0
   103 00000041 E8(00000000)            call printf
   104                                  
   105                                  ;Call function _fill
   106 00000046 48BF-                   mov qword rdi, myArray
   106 00000048 [0000000000000000] 
   107 00000050 BE64000000              mov qword rsi, arraySize
   108 00000055 B800000000              mov qword rax, 0
   109 0000005A E8(00000000)            call _fill
   110 0000005F 4989C6                  mov r14, rax
   111                                  
   112                                  ;Display numbersOutput
   113 00000062 48BF-                   mov qword rdi, stringFormat                     
   113 00000064 [F900000000000000] 
   114 0000006C 48BE-                   mov qword rsi, numbersOutput              
   114 0000006E [7000000000000000] 
   115 00000076 B800000000              mov qword rax, 0
   116 0000007B E8(00000000)            call printf
   117                                  
   118                                  ;Display myArray
   119 00000080 6A00                    push qword 0
   120 00000082 48BF-                   mov qword rdi, myArray
   120 00000084 [0000000000000000] 
   121 0000008C 4C89F6                  mov qword rsi, r14
   122 0000008F B800000000              mov qword rax, 0
   123 00000094 E8(00000000)            call displayArray
   124 00000099 58                      pop qword rax
   125                                  
   126                                  ;Call _sum
   127 0000009A 48BF-                   mov qword rdi, myArray
   127 0000009C [0000000000000000] 
   128 000000A4 4C89F6                  mov qword rsi, r14
   129 000000A7 B800000000              mov qword rax, 0
   130 000000AC E8(00000000)            call _sum
   131 000000B1 4989C5                  mov r13, rax
   132                                  
   133                                  ;Display sumOutput
   134 000000B4 6A00                    push qword 0    
   135 000000B6 B801000000              mov qword rax, 1          
   136 000000BB 48BF-                   mov qword rdi, sumOutput              
   136 000000BD [9500000000000000] 
   137 000000C5 E8(00000000)            call printf
   138 000000CA 58                      pop rax
   139                                  
   140                                  ;Display returnOutput
   141 000000CB 48BF-                   mov qword rdi, stringFormat                     
   141 000000CD [F900000000000000] 
   142 000000D5 48BE-                   mov qword rsi, returnOutput              
   142 000000D7 [B800000000000000] 
   143 000000DF B800000000              mov qword rax, 0
   144 000000E4 E8(00000000)            call printf
   145                                  
   146                                  ;=======================================END OF CODE================================================
   147                                  ;Restores all registers to their original state.
   148 000000E9 58                      pop rax                                 ; Remove extra push of -1 from stack.
   149 000000EA F2410F10C7              movsd xmm0, xmm15                       ; Copies Sum (r13) to rax.
   150 000000EF 9D                      popf                                                 
   151 000000F0 5B                      pop rbx                                                     
   152 000000F1 415F                    pop r15                                                     
   153 000000F3 415E                    pop r14                                                      
   154 000000F5 415D                    pop r13                                                      
   155 000000F7 415C                    pop r12                                                      
   156 000000F9 415B                    pop r11                                                     
   157 000000FB 415A                    pop r10                                                     
   158 000000FD 4159                    pop r9                                                      
   159 000000FF 4158                    pop r8                                                      
   160 00000101 59                      pop rcx                                                     
   161 00000102 5A                      pop rdx                                                     
   162 00000103 5E                      pop rsi                                                     
   163 00000104 5F                      pop rdi                                                     
   164 00000105 5D                      pop rbp
   165 00000106 C3                      ret
