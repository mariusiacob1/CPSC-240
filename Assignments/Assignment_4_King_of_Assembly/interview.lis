     1                                  
     2                                  ;Program name: "King of Assembly".  This program demonstrates the input of multiple float numbers from the standard input device
     3                                  ;using a single instruction and the output of multiple float numbers to the standard output device also using a single 
     4                                  ;instruction.  Copyright (C) 2019 Marius Iacob.
     5                                  ;
     6                                  ;==================================================================================================================================
     7                                  ;This file is part of the software program "King of Assembly".                                                                 
     8                                  ;King of Assembly is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
     9                                  ;version 3 as published by the Free Software Foundation.                                                                    
    10                                  ;King of Assembly is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         
    11                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     
    12                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.
    13                                  ;
    14                                  ;==================================================================================================================================
    15                                  ;Author information
    16                                  ;   Author name: Marius Iacob
    17                                  ;   Author email: mariusiacob@csu.fullerton.edu
    18                                  ;
    19                                  ;==================================================================================================================================
    20                                  ;Program information
    21                                  ;   Program name: King of Assembly
    22                                  ;   Programming languages: One modules in C++, and one module in X86
    23                                  ;   Date program began: 2021-Mar-12
    24                                  ;   Date of last update: 2021-Mar-21
    25                                  ;   Date of reorganization of comments: 2021-May-19
    26                                  ;   Files in this program: interview.asm, main.cpp, r.sh, 
    27                                  ;   Status: Finished.  The program was tested extensively with no errors in Ubuntu 20.04
    28                                  ;
    29                                  ;==================================================================================================================================
    30                                  ;Purpose
    31                                  ;   Show how to input, output, and calculating floating point (64-bit) numbers.
    32                                  ;   This file (interview.asm) will interview up the array from the user and will send the
    33                                  ;   the total number of elements that were inputted from the user back to interview.
    34                                  ;
    35                                  ;==================================================================================================================================
    36                                  ;This file
    37                                  ;   File name: interview.asm
    38                                  ;   Language: X86 with Intel syntax.
    39                                  ;   Max page width: 132 columns
    40                                  ;   Assemble: nasm -f elf64 -l interview.lis -o interview.o interview.asm
    41                                  ;
    42                                  ;==================================================================================================================================
    43                                  
    44                                  ;======================================== Begin Code ========================================
    45                                  extern printf
    46                                  extern scanf
    47                                  
    48                                  global _interview
    49                                  
    50                                  segment .data
    51                                      ;Inputs / Outputs
    52 00000000 48656C6C6F2025732E-         welcomePrompt db "Hello %s. I am Ms. Fenster. The interview will begin now.", 10, 0
    52 00000009 204920616D204D732E-
    52 00000012 2046656E737465722E-
    52 0000001B 2054686520696E7465-
    52 00000024 72766965772077696C-
    52 0000002D 6C20626567696E206E-
    52 00000036 6F772E0A00         
    53 0000003B 576F772120252E326C-         intputPrompt db "Wow! %.2lf That's a lof of cash. Who do you think you are, Chris Sawyer (y or n)? ", 10, 0
    53 00000044 662054686174277320-
    53 0000004D 61206C6F66206F6620-
    53 00000056 636173682E2057686F-
    53 0000005F 20646F20796F752074-
    53 00000068 68696E6B20796F7520-
    53 00000071 6172652C2043687269-
    53 0000007A 732053617779657220-
    53 00000083 2879206F72206E293F-
    53 0000008C 200A00             
    54 0000008F 416C72696768742E20-         alrightPrompt db "Alright. Now we will work on your electricity.", 10, 0
    54 00000098 4E6F77207765207769-
    54 000000A1 6C6C20776F726B206F-
    54 000000AA 6E20796F757220656C-
    54 000000B3 656374726963697479-
    54 000000BC 2E0A00             
    55 000000BF 506C6561736520656E-         electricityPrompt db "Please enter the resistance of circuit #1 in ohms: ", 10, 0
    55 000000C8 746572207468652072-
    55 000000D1 6573697374616E6365-
    55 000000DA 206F66206369726375-
    55 000000E3 697420233120696E20-
    55 000000EC 6F686D733A200A00   
    56 000000F4 576861742069732074-         resistancePrompt db "What is the resistance of circut #2 on ohms: ", 10, 0
    56 000000FD 686520726573697374-
    56 00000106 616E6365206F662063-
    56 0000010F 697263757420233220-
    56 00000118 6F6E206F686D733A20-
    56 00000121 0A00               
    57 00000123 54686520746F74616C-         totalResistance db "The total resistance is %.2lf ohms.", 10, 0         
    57 0000012C 20726573697374616E-
    57 00000135 636520697320252E32-
    57 0000013E 6C66206F686D732E0A-
    57 00000147 00                 
    58 00000148 41726520796F752061-         csMajor db "Are you a computer science major (y or n)? ", 0
    58 00000151 20636F6D7075746572-
    58 0000015A 20736369656E636520-
    58 00000163 6D616A6F7220287920-
    58 0000016C 6F72206E293F2000   
    59                                  
    60                                      ;Formats
    61 00000174 257300                      stringFormat db "%s", 0
    62 00000177 256C6600                    floatFormat db "%lf", 0
    63                                  
    64                                  segment .bss
    65                                  
    66                                  segment .text   ; Reserved for executing instructions.
    67                                  
    68                                  _interview:
    69                                  
    70                                  ; Back up all registers and set stack pointer to base pointer
    71 00000000 55                      push rbp
    72 00000001 4889E5                  mov rbp, rsp
    73 00000004 57                      push rdi
    74 00000005 56                      push rsi
    75 00000006 52                      push rdx
    76 00000007 51                      push rcx
    77 00000008 4150                    push r8
    78 0000000A 4151                    push r9
    79 0000000C 4152                    push r10
    80 0000000E 4153                    push r11
    81 00000010 4154                    push r12
    82 00000012 4155                    push r13
    83 00000014 4156                    push r14
    84 00000016 4157                    push r15
    85 00000018 53                      push rbx
    86 00000019 9C                      pushf
    87                                  
    88                                  ;=======================================BEGIN CODE=================================================
    89 0000001A 6A00                    push qword 0                            ; Extra push to create even number of pushes
    90                                  
    91                                  ; Save the args passed (Name and Salary) into regs
    92 0000001C 4989FF                  mov r15, rdi                            ; fullName from driver
    93 0000001F F2440F10F8              movsd xmm15, xmm0                       ; salary from driver
    94                                  
    95                                  ; Displays welcomePrompt
    96 00000024 6A00                    push qword 0
    97 00000026 B800000000              mov rax, 0 
    98 0000002B 48BF-                   mov rdi, welcomePrompt
    98 0000002D [0000000000000000] 
    99 00000035 4C89FE                  mov rsi, r15
   100 00000038 E8(00000000)            call printf
   101 0000003D 58                      pop rax
   102                                  
   103                                  ; Display input from driver
   104 0000003E 6A63                    push qword 99
   105 00000040 B801000000              mov rax, 1
   106 00000045 48BF-                   mov rdi, intputPrompt
   106 00000047 [3B00000000000000] 
   107 0000004F F2410F10C7              movsd xmm0, xmm15
   108 00000054 E8(00000000)            call printf
   109 00000059 58                      pop rax
   110                                  
   111 0000005A 6A00                    push qword 0
   112 0000005C 48BF-                   mov rdi, stringFormat
   112 0000005E [7401000000000000] 
   113 00000066 4889E6                  mov rsi, rsp
   114 00000069 E8(00000000)            call scanf
   115 0000006E 58                      pop rax
   116                                  
   117 0000006F 41BF79000000            mov r15, 'y'
   118 00000075 4C39F8                  cmp rax, r15
   119 00000078 0F8437010000            je sawyer
   120                                  
   121 0000007E 41BF6E000000            mov r15, 'n'
   122 00000084 4C39F8                  cmp rax, r15
   123 00000087 7400                    je elecResist
   124                                  
   125                                  ; Displaying out the electricity/resistance prompt
   126                                  elecResist:
   127 00000089 6A00                    push qword 0
   128 0000008B B800000000              mov rax, 0
   129 00000090 48BF-                   mov rdi, alrightPrompt
   129 00000092 [8F00000000000000] 
   130 0000009A E8(00000000)            call printf 
   131 0000009F 58                      pop rax
   132                                  
   133                                  ; Getting / storing the electricity input from user
   134 000000A0 6A63                    push qword 99
   135 000000A2 B800000000              mov rax, 0 
   136 000000A7 48BF-                   mov rdi, electricityPrompt
   136 000000A9 [BF00000000000000] 
   137 000000B1 E8(00000000)            call printf
   138 000000B6 58                      pop rax
   139                                  
   140 000000B7 6AFF                    push qword -1
   141 000000B9 B800000000              mov rax, 0
   142 000000BE 48BF-                   mov rdi, floatFormat
   142 000000C0 [7701000000000000] 
   143 000000C8 4889E6                  mov rsi, rsp
   144 000000CB E8(00000000)            call scanf
   145 000000D0 F2440F102424            movsd xmm12, [rsp]
   146 000000D6 58                      pop rax
   147                                  
   148 000000D7 6A63                    push qword 99
   149 000000D9 B800000000              mov rax, 0 
   150 000000DE 48BF-                   mov rdi, resistancePrompt
   150 000000E0 [F400000000000000] 
   151 000000E8 E8(00000000)            call printf
   152 000000ED 58                      pop rax
   153                                  
   154 000000EE 6AFF                    push qword -1
   155 000000F0 B800000000              mov rax, 0
   156 000000F5 48BF-                   mov rdi, floatFormat
   156 000000F7 [7701000000000000] 
   157 000000FF 4889E6                  mov rsi, rsp
   158 00000102 E8(00000000)            call scanf
   159 00000107 F2440F102C24            movsd xmm13, [rsp]
   160 0000010D 58                      pop rax
   161                                  
   162                                  ;Calculation
   163 0000010E 6A63                    push qword 99
   164 00000110 41B801000000            mov r8, 1                               ;r8 is a 64-bit register to store in value
   165 00000116 F24D0F2AC0              cvtsi2sd xmm8, r8                       ;cvtsi2sd converts 32-bit integer to 64-bit floating-point
   166 0000011B 41B901000000            mov r9, 1                               ;r9 is a 64-bit register to store in value
   167 00000121 F24D0F2AC9              cvtsi2sd xmm9, r9                       ;cvtsi2sd converts 32-bit integer to 64-bit floating-point
   168 00000126 41BA01000000            mov r10, 1                              ;r10 is a 64-bit register to store in value
   169 0000012C F24D0F2AD2              cvtsi2sd xmm10, r10                     ;cvtsi2sd converts 32-bit integer to 64-bit floating-point
   170 00000131 F2450F5EC4              divsd xmm8, xmm12 
   171 00000136 F2450F5ECD              divsd xmm9, xmm13 
   172 0000013B F2450F58C1              addsd xmm8, xmm9
   173 00000140 F2450F5ED0              divsd xmm10, xmm8
   174                                  
   175 00000145 B801000000              mov rax, 1
   176 0000014A 48BF-                   mov rdi, totalResistance
   176 0000014C [2301000000000000] 
   177 00000154 F2410F10C2              movsd xmm0, xmm10
   178 00000159 E8(00000000)            call printf
   179 0000015E 58                      pop rax
   180                                  
   181 0000015F 6A00                    push qword 0
   182 00000161 B800000000              mov rax, 0
   183 00000166 48BF-                   mov rdi, csMajor
   183 00000168 [4801000000000000] 
   184 00000170 E8(00000000)            call printf
   185 00000175 58                      pop rax
   186                                  
   187 00000176 6A00                    push qword 0
   188 00000178 B800000000              mov rax, 0 
   189 0000017D 48BF-                   mov rdi, stringFormat
   189 0000017F [7401000000000000] 
   190 00000187 4889E6                  mov rsi, rsp
   191 0000018A E8(00000000)            call scanf
   192 0000018F 488B0424                mov rax, [rsp]
   193 00000193 4158                    pop r8
   194                                  
   195 00000195 4883F879                cmp rax, 'y'
   196 00000199 740D                    je csMajorMoney
   197                                  
   198 0000019B 41B8B0040000            mov r8, 1200d
   199 000001A1 F24D0F2AF8              cvtsi2sd xmm15, r8
   200                                  
   201 000001A6 EB18                    jmp end
   202                                  
   203                                  csMajorMoney:                           ;Displays input from driver
   204 000001A8 41B850C30000            mov r8, 50000
   205 000001AE F24D0F2AF8              cvtsi2sd xmm15, r8
   206                                  
   207 000001B3 EB0B                    jmp end
   208                                  
   209                                  sawyer:
   210 000001B5 41B840420F00            mov r8, 1000000
   211 000001BB F24D0F2AF8              cvtsi2sd xmm15, r8
   212                                  
   213                                  end:
   214 000001C0 F2410F10C7              movsd xmm0, xmm15
   215                                  ;=======================================EXIT PROGRAM===============================================
   216                                  ; Restore all backed up registers to their original state.
   217 000001C5 58                      pop rax                                 
   218 000001C6 9D                      popf
   219 000001C7 5B                      pop rbx                                                     
   220 000001C8 415F                    pop r15                                                     
   221 000001CA 415E                    pop r14                                                      
   222 000001CC 415D                    pop r13                                                      
   223 000001CE 415C                    pop r12                                                      
   224 000001D0 415B                    pop r11                                                     
   225 000001D2 415A                    pop r10                                                     
   226 000001D4 4159                    pop r9                                                      
   227 000001D6 4158                    pop r8                                                      
   228 000001D8 59                      pop rcx                                                     
   229 000001D9 5A                      pop rdx                                                     
   230 000001DA 5E                      pop rsi                                                     
   231 000001DB 5F                      pop rdi                                                     
   232 000001DC 5D                      pop rbp
   233 000001DD C3                      ret
